// 导入必要的包
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.StringReader;
import java.io.StringWriter;

// 用户代码部分开始 - 请勿修改此标记
{% if "import " in user_code %}
// 提取用户代码中的导入语句
{% for line in user_code.split('\n') %}
{% if line.strip().startswith("import ") %}
{{ line }}
{% endif %}
{% endfor %}

// 用户代码（不包含导入语句）
{% for line in user_code.split('\n') %}
{% if not line.strip().startswith("import ") %}
{{ line }}
{% endif %}
{% endfor %}
{% else %}
// 用户代码
{{ user_code }}
{% endif %}
// 用户代码部分结束 - 请勿修改此标记

{% if "public class Solution" not in user_code and "class Solution" not in user_code %}
// 如果用户代码中没有Solution类，添加一个Solution类
public class Solution {
    // 这里假设用户代码中定义了solve方法
    public Object solve(Map<String, Object> input) {
        // 默认实现，应该被用户代码覆盖
        return null;
    }
}
{% endif %}

// 添加测试类（公共类，作为程序入口点）
public class TestRunner {
    // 测试用例
    private static final List<TestCase> TEST_CASES = createTestCases();
    
    private static List<TestCase> createTestCases() {
        List<TestCase> testCases = new ArrayList<>();
        
        {% for test_case in test_cases %}
        // 测试用例 {{ loop.index }}
        {
            String inputJson = "{{ test_case.input | tojson | replace('"', '\\"') }}";
            String expectedOutputJson = "{{ test_case.expected_output | tojson | replace('"', '\\"') }}";
            String description = "{{ test_case.description or '' }}";
            
            Object parsedInput = parseJson(inputJson);
            Map<String, Object> input;
            
            // 确保输入是Map<String, Object>类型
            if (parsedInput instanceof Map) {
                input = (Map<String, Object>) parsedInput;
            } else {
                // 如果不是Map，创建一个包含原始输入的Map
                input = new HashMap<>();
                input.put("value", parsedInput);
            }
            
            Object expectedOutput = parseJson(expectedOutputJson);
            
            testCases.add(new TestCase(input, expectedOutput, description));
        }
        {% endfor %}
        
        return testCases;
    }
    
    public static void main(String[] args) {
        List<TestResult> results = new ArrayList<>();
        
        for (int i = 0; i < TEST_CASES.size(); i++) {
            TestCase testCase = TEST_CASES.get(i);
            System.err.println("运行测试用例 " + (i+1) + "...");
            
            try {
                // 记录开始时间
                long startTime = System.currentTimeMillis();
                
                // 创建Solution实例
                Solution solution;
                try {
                    solution = new Solution();
                } catch (Exception e) {
                    throw new RuntimeException("无法创建Solution实例: " + e.getMessage(), e);
                }
                
                // 执行用户代码
                Object actualOutput;
                try {
                    actualOutput = solution.solve(testCase.input);
                } catch (Exception e) {
                    throw new RuntimeException("执行solve方法时出错: " + e.getMessage(), e);
                }
                
                // 记录结束时间
                long endTime = System.currentTimeMillis();
                long executionTime = endTime - startTime;
                
                // 检查结果
                boolean passed = equals(actualOutput, testCase.expectedOutput);
                
                results.add(new TestResult(
                    passed,
                    testCase.input,
                    testCase.expectedOutput,
                    actualOutput,
                    executionTime,
                    0, // 简化版不计算内存使用
                    testCase.description
                ));
                
            } catch (Exception e) {
                // 记录异常
                String errorMessage = e.getMessage();
                StringBuilder stackTrace = new StringBuilder();
                for (StackTraceElement element : e.getStackTrace()) {
                    stackTrace.append(element.toString()).append("\n");
                }
                
                results.add(new TestResult(
                    false,
                    testCase.input,
                    testCase.expectedOutput,
                    new ErrorOutput(errorMessage, stackTrace.toString()),
                    0,
                    0,
                    testCase.description
                ));
            }
        }
        
        // 输出结果
        System.out.println(toJsonString(results));
    }
    
    // 辅助方法：比较两个对象是否相等
    private static boolean equals(Object a, Object b) {
        if (a == b) return true;
        if (a == null || b == null) return false;
        
        if (a instanceof List && b instanceof List) {
            List<?> listA = (List<?>) a;
            List<?> listB = (List<?>) b;
            
            if (listA.size() != listB.size()) return false;
            
            for (int i = 0; i < listA.size(); i++) {
                if (!equals(listA.get(i), listB.get(i))) return false;
            }
            
            return true;
        }
        
        if (a instanceof Map && b instanceof Map) {
            Map<?, ?> mapA = (Map<?, ?>) a;
            Map<?, ?> mapB = (Map<?, ?>) b;
            
            if (mapA.size() != mapB.size()) return false;
            
            for (Object key : mapA.keySet()) {
                if (!mapB.containsKey(key) || !equals(mapA.get(key), mapB.get(key))) return false;
            }
            
            return true;
        }
        
        // 对于数字类型，特殊处理
        if (a instanceof Number && b instanceof Number) {
            // 如果都是整数类型
            if ((a instanceof Integer || a instanceof Long) && 
                (b instanceof Integer || b instanceof Long)) {
                return ((Number)a).longValue() == ((Number)b).longValue();
            }
            // 如果有浮点数，使用双精度比较
            return Math.abs(((Number)a).doubleValue() - ((Number)b).doubleValue()) < 1e-9;
        }
        
        // 对于基本类型和字符串，使用equals方法
        return a.equals(b);
    }
    
    // 将对象转换为JSON字符串
    private static String toJsonString(Object obj) {
        if (obj == null) {
            return "null";
        }
        
        if (obj instanceof String) {
            return "\"" + ((String) obj).replace("\\", "\\\\")
                                       .replace("\"", "\\\"")
                                       .replace("\n", "\\n")
                                       .replace("\r", "\\r")
                                       .replace("\t", "\\t") + "\"";
        }
        
        if (obj instanceof Number || obj instanceof Boolean) {
            return obj.toString();
        }
        
        if (obj instanceof List) {
            List<?> list = (List<?>) obj;
            StringBuilder sb = new StringBuilder("[");
            boolean first = true;
            
            for (Object item : list) {
                if (!first) {
                    sb.append(",");
                }
                sb.append(toJsonString(item));
                first = false;
            }
            
            sb.append("]");
            return sb.toString();
        }
        
        if (obj instanceof Map) {
            Map<?, ?> map = (Map<?, ?>) obj;
            StringBuilder sb = new StringBuilder("{");
            boolean first = true;
            
            for (Map.Entry<?, ?> entry : map.entrySet()) {
                if (!first) {
                    sb.append(",");
                }
                sb.append(toJsonString(entry.getKey().toString()));
                sb.append(":");
                sb.append(toJsonString(entry.getValue()));
                first = false;
            }
            
            sb.append("}");
            return sb.toString();
        }
        
        // 对于其他类型，尝试转换为Map
        java.util.Map<String, Object> map = new java.util.HashMap<>();
        try {
            for (java.lang.reflect.Field field : obj.getClass().getDeclaredFields()) {
                field.setAccessible(true);
                map.put(field.getName(), field.get(obj));
            }
            return toJsonString(map);
        } catch (Exception e) {
            return "\"" + obj.toString() + "\"";
        }
    }
    
    // 简单的JSON解析方法
    private static Object parseJson(String json) {
        json = json.trim();
        
        // 解析null
        if (json.equals("null")) return null;
        
        // 解析布尔值
        if (json.equals("true")) return Boolean.TRUE;
        if (json.equals("false")) return Boolean.FALSE;
        
        // 解析字符串
        if (json.startsWith("\"") && json.endsWith("\"")) {
            return json.substring(1, json.length() - 1)
                    .replace("\\\"", "\"")
                    .replace("\\\\", "\\")
                    .replace("\\n", "\n")
                    .replace("\\r", "\r")
                    .replace("\\t", "\t");
        }
        
        // 解析数字
        try {
            if (json.contains(".")) {
                return Double.parseDouble(json);
            } else {
                try {
                    return Integer.parseInt(json);
                } catch (NumberFormatException e) {
                    // 可能是长整型
                    return Long.parseLong(json);
                }
            }
        } catch (NumberFormatException e) {
            // 不是数字
        }
        
        // 解析数组
        if (json.startsWith("[") && json.endsWith("]")) {
            List<Object> list = new ArrayList<>();
            String content = json.substring(1, json.length() - 1).trim();
            
            if (!content.isEmpty()) {
                int start = 0;
                int brackets = 0;
                int braces = 0;
                boolean inString = false;
                boolean escaped = false;
                
                for (int i = 0; i < content.length(); i++) {
                    char c = content.charAt(i);
                    
                    if (escaped) {
                        escaped = false;
                        continue;
                    }
                    
                    if (c == '\\') {
                        escaped = true;
                    } else if (c == '"' && !escaped) {
                        inString = !inString;
                    } else if (!inString) {
                        if (c == '[') brackets++;
                        else if (c == ']') brackets--;
                        else if (c == '{') braces++;
                        else if (c == '}') braces--;
                        else if (c == ',' && brackets == 0 && braces == 0) {
                            String element = content.substring(start, i).trim();
                            if (!element.isEmpty()) {
                                list.add(parseJson(element));
                            }
                            start = i + 1;
                        }
                    }
                }
                
                String lastElement = content.substring(start).trim();
                if (!lastElement.isEmpty()) {
                    list.add(parseJson(lastElement));
                }
            }
            
            return list;
        }
        
        // 解析对象
        if (json.startsWith("{") && json.endsWith("}")) {
            Map<String, Object> map = new HashMap<>();
            String content = json.substring(1, json.length() - 1).trim();
            
            if (!content.isEmpty()) {
                int start = 0;
                int brackets = 0;
                int braces = 0;
                boolean inString = false;
                boolean escaped = false;
                String key = null;
                
                for (int i = 0; i < content.length(); i++) {
                    char c = content.charAt(i);
                    
                    if (escaped) {
                        escaped = false;
                        continue;
                    }
                    
                    if (c == '\\') {
                        escaped = true;
                    } else if (c == '"' && !escaped) {
                        inString = !inString;
                    } else if (!inString) {
                        if (c == '[') brackets++;
                        else if (c == ']') brackets--;
                        else if (c == '{') braces++;
                        else if (c == '}') braces--;
                        else if (c == ':' && brackets == 0 && braces == 0 && key == null) {
                            key = content.substring(start, i).trim();
                            if (key.startsWith("\"") && key.endsWith("\"")) {
                                key = key.substring(1, key.length() - 1)
                                      .replace("\\\"", "\"")
                                      .replace("\\\\", "\\");
                            }
                            start = i + 1;
                        }
                        else if (c == ',' && brackets == 0 && braces == 0 && key != null) {
                            String value = content.substring(start, i).trim();
                            map.put(key, parseJson(value));
                            key = null;
                            start = i + 1;
                        }
                    }
                }
                
                if (key != null) {
                    String value = content.substring(start).trim();
                    map.put(key, parseJson(value));
                }
            }
            
            return map;
        }
        
        // 默认返回原始字符串
        return json;
    }
    
    // 测试用例类
    private static class TestCase {
        public final Map<String, Object> input;
        public final Object expectedOutput;
        public final String description;
        
        public TestCase(Map<String, Object> input, Object expectedOutput, String description) {
            this.input = input;
            this.expectedOutput = expectedOutput;
            this.description = description;
        }
    }
    
    // 测试结果类
    private static class TestResult {
        public final boolean passed;
        public final Object input;
        public final Object expected_output;
        public final Object actual_output;
        public final long execution_time;
        public final long memory_usage;
        public final String description;
        
        public TestResult(boolean passed, Object input, Object expected_output, Object actual_output, 
                         long execution_time, long memory_usage, String description) {
            this.passed = passed;
            this.input = input;
            this.expected_output = expected_output;
            this.actual_output = actual_output;
            this.execution_time = execution_time;
            this.memory_usage = memory_usage;
            this.description = description;
        }
    }
    
    // 错误输出类
    private static class ErrorOutput {
        public final String error;
        public final String stack;
        
        public ErrorOutput(String error, String stack) {
            this.error = error;
            this.stack = stack;
        }
    }
} 