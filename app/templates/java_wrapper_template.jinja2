// 用户代码
{{ user_code }}

// 如果用户代码中没有主类，添加一个主类
{% if "public class" not in user_code and "class" not in user_code %}
public class Solution {
    // 这里假设用户代码中定义了solve方法
}
{% endif %}

// 添加主类，用于读取输入和执行用户代码
public class Main {
    public static void main(String[] args) {
        try {
            // 读取输入
            java.util.Scanner scanner = new java.util.Scanner(System.in);
            String inputJson = scanner.useDelimiter("\\A").next();
            scanner.close();
            
            // 解析JSON (简单实现，不使用外部库)
            Object input = parseJson(inputJson);
            
            // 执行用户代码
            Solution solution = new Solution();
            Object result = solution.solve(input);
            
            // 输出结果
            System.out.println(toJsonString(result));
        } catch (Exception e) {
            System.out.println("{\"error\": \"" + e.getMessage().replace("\"", "\\\"") + "\"}");
            e.printStackTrace();
        }
    }
    
    // 简单的JSON解析方法
    private static Object parseJson(String json) {
        json = json.trim();
        
        // 解析数组
        if (json.startsWith("[") && json.endsWith("]")) {
            java.util.List<Object> list = new java.util.ArrayList<>();
            String content = json.substring(1, json.length() - 1).trim();
            
            if (!content.isEmpty()) {
                int start = 0;
                int brackets = 0;
                int braces = 0;
                boolean inString = false;
                
                for (int i = 0; i < content.length(); i++) {
                    char c = content.charAt(i);
                    
                    if (c == '"' && (i == 0 || content.charAt(i - 1) != '\\')) {
                        inString = !inString;
                    } else if (!inString) {
                        if (c == '[') brackets++;
                        else if (c == ']') brackets--;
                        else if (c == '{') braces++;
                        else if (c == '}') braces--;
                        else if (c == ',' && brackets == 0 && braces == 0) {
                            list.add(parseJson(content.substring(start, i)));
                            start = i + 1;
                        }
                    }
                }
                
                list.add(parseJson(content.substring(start)));
            }
            
            return list;
        }
        
        // 解析对象
        if (json.startsWith("{") && json.endsWith("}")) {
            java.util.Map<String, Object> map = new java.util.HashMap<>();
            String content = json.substring(1, json.length() - 1).trim();
            
            if (!content.isEmpty()) {
                int start = 0;
                int brackets = 0;
                int braces = 0;
                boolean inString = false;
                String key = null;
                
                for (int i = 0; i < content.length(); i++) {
                    char c = content.charAt(i);
                    
                    if (c == '"' && (i == 0 || content.charAt(i - 1) != '\\')) {
                        inString = !inString;
                    } else if (!inString) {
                        if (c == '[') brackets++;
                        else if (c == ']') brackets--;
                        else if (c == '{') braces++;
                        else if (c == '}') braces--;
                        else if (c == ':' && brackets == 0 && braces == 0 && key == null) {
                            key = content.substring(start, i).trim();
                            if (key.startsWith("\"") && key.endsWith("\"")) {
                                key = key.substring(1, key.length() - 1);
                            }
                            start = i + 1;
                        }
                        else if (c == ',' && brackets == 0 && braces == 0) {
                            map.put(key, parseJson(content.substring(start, i)));
                            key = null;
                            start = i + 1;
                        }
                    }
                }
                
                if (key != null) {
                    map.put(key, parseJson(content.substring(start)));
                }
            }
            
            return map;
        }
        
        // 解析字符串
        if (json.startsWith("\"") && json.endsWith("\"")) {
            return json.substring(1, json.length() - 1)
                    .replace("\\\"", "\"")
                    .replace("\\\\", "\\")
                    .replace("\\n", "\n")
                    .replace("\\r", "\r")
                    .replace("\\t", "\t");
        }
        
        // 解析数字
        try {
            if (json.contains(".")) {
                return Double.parseDouble(json);
            } else {
                return Integer.parseInt(json);
            }
        } catch (NumberFormatException e) {
            // 不是数字
        }
        
        // 解析布尔值
        if (json.equals("true")) return Boolean.TRUE;
        if (json.equals("false")) return Boolean.FALSE;
        
        // 解析null
        if (json.equals("null")) return null;
        
        // 默认返回原始字符串
        return json;
    }
    
    // 将对象转换为JSON字符串
    private static String toJsonString(Object obj) {
        if (obj == null) {
            return "null";
        }
        
        if (obj instanceof String) {
            return "\"" + ((String) obj).replace("\\", "\\\\")
                                       .replace("\"", "\\\"")
                                       .replace("\n", "\\n")
                                       .replace("\r", "\\r")
                                       .replace("\t", "\\t") + "\"";
        }
        
        if (obj instanceof Number || obj instanceof Boolean) {
            return obj.toString();
        }
        
        if (obj instanceof java.util.List) {
            java.util.List<?> list = (java.util.List<?>) obj;
            StringBuilder sb = new StringBuilder("[");
            boolean first = true;
            
            for (Object item : list) {
                if (!first) {
                    sb.append(",");
                }
                sb.append(toJsonString(item));
                first = false;
            }
            
            sb.append("]");
            return sb.toString();
        }
        
        if (obj instanceof java.util.Map) {
            java.util.Map<?, ?> map = (java.util.Map<?, ?>) obj;
            StringBuilder sb = new StringBuilder("{");
            boolean first = true;
            
            for (java.util.Map.Entry<?, ?> entry : map.entrySet()) {
                if (!first) {
                    sb.append(",");
                }
                sb.append(toJsonString(entry.getKey().toString()));
                sb.append(":");
                sb.append(toJsonString(entry.getValue()));
                first = false;
            }
            
            sb.append("}");
            return sb.toString();
        }
        
        // 对于其他类型，尝试转换为Map
        java.util.Map<String, Object> map = new java.util.HashMap<>();
        try {
            for (java.lang.reflect.Field field : obj.getClass().getDeclaredFields()) {
                field.setAccessible(true);
                map.put(field.getName(), field.get(obj));
            }
            return toJsonString(map);
        } catch (Exception e) {
            return "\"" + obj.toString() + "\"";
        }
    }
} 